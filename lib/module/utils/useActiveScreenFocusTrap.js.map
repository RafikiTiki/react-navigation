{"version":3,"sources":["useActiveScreenFocusTrap.tsx"],"names":["React","usePrevious","canUseDOM","FOCUSABLE_ELEMENT_SELECTORS","screenRef","isScreenActive","cleanFocusLoopListener","useRef","wasScreenActive","useEffect","current","loopFocus","rootElement","Error","focusableElements","querySelectorAll","length","firstFocusableEl","lastFocusableEl","focus","keyboardHandler","event","key","keyCode","shiftKey","document","activeElement","preventDefault","addEventListener","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,2BAA2B,GAC/B,yKADF;AAGA,eAAe,UACbC,SADa,EAEbC,cAFa,EAGb;AACA,MAAIH,SAAJ,EAAe;AACb,UAAMI,sBAAsB,GAAGN,KAAK,CAACO,MAAN,EAA/B;AACA,UAAMC,eAAe,GAAGP,WAAW,CAACI,cAAD,CAAnC;AAEAL,IAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAID,eAAe,IAAI,CAACH,cAAxB,EAAwC;AAAA;;AACtC,iCAAAC,sBAAsB,CAACI,OAAvB,qFAAAJ,sBAAsB;AACtB;AACD;;AAED,UAAI,CAACE,eAAD,IAAoBH,cAAxB,EAAwC;AACtC;AACAC,QAAAA,sBAAsB,CAACI,OAAvB,GAAiCC,SAAS,CAACP,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEM,OAAZ,CAA1C;AACD;AACF,KAVD,EAUG,CAACL,cAAD,EAAiBD,SAAjB,EAA4BI,eAA5B,CAVH;AAWD;AACF,C,CAED;;AACA,SAASG,SAAT,CAAmBC,WAAnB,EAA6C;AAC3C,MAAI,CAACA,WAAL,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CACJ,4DADI,CAAN;AAGD;;AAED,QAAMC,iBAAiB,GAAGF,WAAW,CAACG,gBAAZ,CACxBZ,2BADwB,CAA1B,CAP2C,CAW3C;;AACA,MAAIW,iBAAiB,CAACE,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,UAAMC,gBAAgB,GAAGH,iBAAiB,CAAC,CAAD,CAA1C;AACA,UAAMI,eAAe,GAAGJ,iBAAiB,CACvCA,iBAAiB,CAACE,MAAlB,GAA2B,CADY,CAAzC;AAGAC,IAAAA,gBAAgB,CAACE,KAAjB;;AAEA,UAAMC,eAAe,GAAIC,KAAD,IAA0B;AAChD;AACA,YAAMC,GAAG,GAAGD,KAAK,CAACC,GAAN,IAAaD,KAAK,CAACE,OAA/B;;AACA,UAAID,GAAG,KAAK,KAAR,IAAiBD,KAAK,CAACE,OAAN,KAAkB,CAAvC,EAA0C;AACxC;AACA,YAAIF,KAAK,CAACG,QAAN,IAAkBC,QAAQ,CAACC,aAAT,KAA2BT,gBAAjD,EAAmE;AACjEI,UAAAA,KAAK,CAACM,cAAN;AACAT,UAAAA,eAAe,CAACC,KAAhB;AACD,SAHD,MAGO,IACL,CAACE,KAAK,CAACG,QAAP,IACAC,QAAQ,CAACC,aAAT,KAA2BR,eAFtB,EAGL;AACAG,UAAAA,KAAK,CAACM,cAAN;AACAV,UAAAA,gBAAgB,CAACE,KAAjB;AACD,SANM,MAMA,CACL;AACD;AACF;AACF,KAlBD;;AAmBAP,IAAAA,WAAW,CAACgB,gBAAZ,CAA6B,SAA7B,EAAwCR,eAAxC;AAEA,WAAO,MAAM;AACXR,MAAAA,WAAW,CAACiB,mBAAZ,CAAgC,SAAhC,EAA2CT,eAA3C;AACD,KAFD;AAGD,GA/BD,MA+BO;AACL,WAAO,MAAM,CAAE,CAAf;AACD;AACF","sourcesContent":["import * as React from 'react';\nimport type { View } from 'react-native';\nimport usePrevious from './usePrevious';\nimport canUseDOM from './canUseDOM';\n\nconst FOCUSABLE_ELEMENT_SELECTORS =\n  'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, [tabindex=\"0\"], [contenteditable]';\n\nexport default function (\n  screenRef: React.RefObject<View>,\n  isScreenActive: boolean\n) {\n  if (canUseDOM) {\n    const cleanFocusLoopListener = React.useRef<VoidFunction>();\n    const wasScreenActive = usePrevious(isScreenActive);\n\n    React.useEffect(() => {\n      if (wasScreenActive && !isScreenActive) {\n        cleanFocusLoopListener.current?.();\n        return;\n      }\n\n      if (!wasScreenActive && isScreenActive) {\n        // @ts-expect-error: We can safely assume that screenRef is containing a HTMLElement, specifically <div />, because we're in web world\n        cleanFocusLoopListener.current = loopFocus(screenRef?.current);\n      }\n    }, [isScreenActive, screenRef, wasScreenActive]);\n  }\n}\n\n// This function is based on https://gist.github.com/r3lk3r/0030bab99347a2326334e00b23188cab#file-focusloopingutil-js\nfunction loopFocus(rootElement: HTMLElement) {\n  if (!rootElement) {\n    throw new Error(\n      'Could not initialize focus-trapping - Root Element Missing'\n    );\n  }\n\n  const focusableElements = rootElement.querySelectorAll(\n    FOCUSABLE_ELEMENT_SELECTORS\n  );\n\n  // There can be containers without any focusable element\n  if (focusableElements.length > 0) {\n    const firstFocusableEl = focusableElements[0] as HTMLElement;\n    const lastFocusableEl = focusableElements[\n      focusableElements.length - 1\n    ] as HTMLElement;\n    firstFocusableEl.focus();\n\n    const keyboardHandler = (event: KeyboardEvent) => {\n      // keyCode used for legacy browsers compatibility\n      const key = event.key || event.keyCode;\n      if (key === 'Tab' || event.keyCode === 9) {\n        //Rotate Focus\n        if (event.shiftKey && document.activeElement === firstFocusableEl) {\n          event.preventDefault();\n          lastFocusableEl.focus();\n        } else if (\n          !event.shiftKey &&\n          document.activeElement === lastFocusableEl\n        ) {\n          event.preventDefault();\n          firstFocusableEl.focus();\n        } else {\n          // do nothing & let the browser handle tabbing\n        }\n      }\n    };\n    rootElement.addEventListener('keydown', keyboardHandler);\n\n    return () => {\n      rootElement.removeEventListener('keydown', keyboardHandler);\n    };\n  } else {\n    return () => {};\n  }\n}\n"]}